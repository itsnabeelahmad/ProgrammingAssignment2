## Creating a special matrix object that can cache its inverse
> makeCacheMatrix <- function( m = matrix() ) {
  +     
    +     ## Inverse property of the matrix is initialized
    +     i <- NULL
    +     
      +     ## Method to set the matrix
      +     set <- function( matrix ) {
        +         m <<- matrix
        +         i <<- NULL
        +     }
      +     
        +     ## Getting the matrix
        +     get <- function() {
          +         ## Return the matrix
            +         m
          +     }
        +     
          +     ## Setting the inverse of the matrix
          +     setInverse <- function(inverse) {
            +         i <<- inverse
            +     }
          +     
            +     ## Getting the inverse of the matrix
            +     getInverse <- function() {
              +         ## Return the inverse property
                +         i
              +     }
            + }
> 
  > 
  > ## AS ASKED IN QUESTION: Compute the inverse of the special matrix returned by "makeCacheMatr##ix"
  > ## above. If the inverse has already been calculated (and the matrix has not
  > ## changed), then the "cachesolve" should retrieve the inverse from the cache.
  > cacheSolve <- function(x, ...) {
    +     
      +     ## Return a matrix that is the inverse of 'x'
      +     m <- x$getInverse()
      +     
        +     ## Return the inverse if it is already set
        +     if( !is.null(m) ) {
          +         message("The cacehd data is being fetched")
          +         return(m)
          +     }
      +     
        +     ## Get the matrix
        +     data <- x$get()
        +     
          +     ## The inverse is calculated by matrix multiplication
          +     m <- solve(data) %*% data
          +     
            +     ## Set the inverse to the object
            +     x$setInverse(m)
          +     
            +     ## Return the matrix
            +     m
          + }